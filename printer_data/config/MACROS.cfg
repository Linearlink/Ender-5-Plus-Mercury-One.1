
[gcode_macro BED_ADJUST]
gcode: 
  {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 BED_SCREWS_ADJUST

[screws_tilt_adjust]
screw1: 4, 25
screw1_name: front left screw
screw2: 304, 25
screw2_name: front right screw
screw3: 304, 285
screw3_name: rear right screw
screw4: 4, 285
screw4_name: rear left screw
horizontal_move_z: 10.
speed: 50.
screw_thread: CW-M3

[gcode_macro Auto_Screws_Adjust]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}

 SCREWS_TILT_CALCULATE

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    SET_IDLE_TIMEOUT TIMEOUT=360000
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[bed_mesh] #Klicky
speed: 200 #120
horizontal_move_z: 10
mesh_min: 28, 28#20, 24
mesh_max: 340, 310 #210, 190 # Ender 5 / 5 Pro
mesh_max: 340, 310 # Ender 5 Plus
probe_count: 5,5

[gcode_macro LOAD_MESH]
gcode:
 BED_MESH_PROFILE LOAD="default"

[gcode_macro AUTO_LEVEL]
gcode:
 #G28
 #Z_TILT_ADJUST
 G28
 BED_MESH_CALIBRATE
 G28 X Y

[gcode_macro Z_Offset]
gcode:
 G28
 PROBE_CALIBRATE
## set position_min: in the "Stepper_Z" section to a negative value such as -5 when probing to set z offset, then revert to 0 aferwords



#[gcode_macro START_PRINT]
#gcode:
#	{% set BED_TEMP=params.BED_TEMP|default(60)|float %}
#	{% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(190)|float %}
#	
#	# Enables part cooling fan to stop duct from melting when waiting for bed temp
#	M106 S153

[gcode_macro Calibrate_IS]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}

 Shaper_Calibrate	

#####################################################################
#   Nozzle Cleaner
#####################################################################    
[gcode_macro CLEAN_NOZZLE]
variable_start_x: -13.5
variable_start_y: 125
variable_start_z: 5
variable_wipe_dist_y: 30
variable_wipe_qty: 3
variable_wipe_spd: 50
variable_raise_distance: 18

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 Z{start_z} F3000
  G1 X{start_x} Y{start_y} F12000

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 0.5} Y{start_y - wipe_dist_y} F{wipe_spd * 600}
   G1 X{start_x + 0.5} Y{start_y + wipe_dist_y} F{wipe_spd * 600}
   G1 X{start_x + 0.5} Y{start_y - wipe_dist_y} F{wipe_spd * 600}
   G1 X{start_x + 0.5} Y{start_y + wipe_dist_y} F{wipe_spd * 600}
   G1 X{start_x + 0.5} Y{start_y - wipe_dist_y} F{wipe_spd * 600}
   #WIPE RIGHT
   G1 X{start_x - 0.5} Y{start_y + wipe_dist_y} F{wipe_spd * 600}
   G1 X{start_x - 0.5} Y{start_y - wipe_dist_y} F{wipe_spd * 600}
   G1 X{start_x - 0.5} Y{start_y + wipe_dist_y} F{wipe_spd * 600}
   G1 X{start_x - 0.5} Y{start_y - wipe_dist_y} F{wipe_spd * 600}
   G1 X{start_x - 0.5} Y{start_y + wipe_dist_y} F{wipe_spd * 600}
   
 {% endfor %}

 ## Raise nozzle after complete
 #G1 Z{raise_distance}
 G1 Y 10
 G1 X 10

[gcode_macro START_PRINT]
gcode:
	{% set BED_TEMP=params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(190)|float %}
	
  M106 S153

	# Home the printer
	G90
	M83
	G28 X Y
  G1 X0 Y0 F15000 #X-7 Y-8 F15000

  # Preheat the bed
	M140 S{BED_TEMP}
	M190 S{BED_TEMP}
	M104 S180

  #Z_TILT_ADJUST

  G28

  # Auto Bed level
  #BED_MESH_CALIBRATE
  BED_MESH_PROFILE LOAD="default"

  G1 X0 Y0 F15000 #X-7 Y-8 F15000
	
  #G28 X Y

  # Heat the extruder to the desired temperature
	M104 S{EXTRUDER_TEMP}
	M109 S{EXTRUDER_TEMP}
	
  #G28 X Y

  CLEAN_NOZZLE
  
  M82

	# Prime line sequence
	G1 Z5 F3000 ; lift
	G1 X20 Y5 F6000 ; move to prime position
	G1 Z0.15 F3000 ; get ready to prime
	G92 E0 ; reset extrusion distance
	G1 X100 E30 F600 ; prime nozzle with adjusted extrusion / E__ based on how much you like
	
	# String removal circle after priming
	G1 Z0.2 F3000 ; adjust to 0.2mm above the bed
	G1 Y15 F10000 ; move the toolhead in the Y direction by 15 units
	
	# Execute the circle 3 times
	G2 I-5 J0 F10000 ; circle with 5mm radius
	G2 I-5 J0 F10000
	G2 I-5 J0 F10000
  G1 Z5 F3000 ; lift


[gcode_macro END_PRINT]
gcode:
    M117 Done printing
    # move z up
    G91
    G1 E-3 Z+10 F3000
    # absolute xy 
    G90
    G28 X Y
    #disable hotend and heated bed
    M104 S0
    M140 S0
    # disable steppers
    M84

[gcode_macro PRIME]
gcode: 
  M117 Prime Line
  G92 E0 ;Reset Extruder
  G1 Z2.0 F3000 ;Move Z Axis up
  G1 X10.1 Y20 Z0.28 F5000.0 ;Move to start position
  G1 X10.1 Y200.0 Z0.28 F1500.0 E15 ;Draw the first line
  G1 X10.4 Y200.0 Z0.28 F5000.0 ;Move to side a little
  G1 X10.4 Y20 Z0.28 F1500.0 E30 ;Draw the second line
  G92 E0 ;Reset Extruder
  G1 Z2.0 F3000 ;Move Z Axis up

[gcode_macro Accel]
gcode:
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=8000
  SET_VELOCITY_LIMIT ACCEL=8000

[gcode_macro SQV]
gcode:
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5
  
[gcode_macro G29]
gcode:
  BED_MESH_CALIBRATE
  G1 X0 Y0 Z10 F4000


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro M0]
gcode: 
    PAUSE
    SET_IDLE_TIMEOUT TIMEOUT=7200


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  #TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
#  G28 X Y
   M117 Print Canceled
    # move z up
    G91
    G1 E-3 Z+10 F3000
    # absolute xy 
    G90
    G28 X Y
    #disable hotend and heated bed
    M104 S0
    M140 S0
    # disable steppers
    M84

[gcode_macro ZTILT]
description: Makes z steppers level with eachother
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 Z_TILT_ADJUST
  G28 X Y